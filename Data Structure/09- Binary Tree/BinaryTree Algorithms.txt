Name: Breadth first traversal
Inputs: None
Processes:
    add root node to a queue
    while queue has data:
        - currentNode = queue.dequeue
        - print currentNode data
        - if currentNode.left then enqueue it
        - if currentNode.right then enqueue it

Outputs: None

-----------------------------------------------------------------------------------

Name: Breadth first insertion
Inputs: None
Processes:
    if root is null
        - root = newNode
        - return
    add root node to a queue
    while queue has data:
        - currentNode = queue.Dequeue
        - if currentNode.left is null
            - currentNode.left = newNode
            - break
        - else
            - enqueue currentNode.left
        
        - if currentNode.right is null
            - currentNode.right = newNode
            - break
        - else
            - enqueue currentNode.right

Outputs: None

-----------------------------------------------------------------------------------

Name: Height
Inputs: node
Processes:
    if node == null return 0
    return 1 + max(height node.left, height node.right)

Outputs: None

-----------------------------------------------------------------------------------

Name: Pre Order
Processes: Node -> Left -> Right

Name: In Order
Processes: Left -> Node -> Right

Name: Pre Order
Processes: Left -> Right -> Node

-----------------------------------------------------------------------------------

Name: Find
Inputs: data
Processes:
    apply any traversal method

Outputs: node

-----------------------------------------------------------------------------------

Name: Delete
Inputs: data
Processes:
    replace the node by the bottem-most-right node (last node) of the tree

    find parent, left, right of the node
    find the last node
    make last node point to node childs
    make node parent point to last node
    clear the pointer of last node in its parent
    make node equal null

Outputs: None

